source('F:/UCDAVIS/GWToolsRpack/gwtools/R/c2vsim.R')
debugSource('F:/UCDAVIS/GWToolsRpack/gwtools/R/c2vsim.R')
devtools::document()
install.packages("devtools")
install.packages("roxygen2")
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
sqrt(11982.383209392994)
1/1000
c(-9.7114468101101723e-05 y=7.0110484036114363e-05 z=-2.6129846065793455e-05)
c(-9.7114468101101723e-05, y=7.0110484036114363e-05, z=-2.6129846065793455e-05)
c(-9.7114468101101723e-05, 7.0110484036114363e-05, -2.6129846065793455e-05)
c(-9.7114468101101723e-05, 7.0110484036114363e-05, -2.6129846065793455e-05)/6.6158147885109228e-05
c(1000,10)
c(1000,10)*1000
c(1000,10)*1500
15000/3600
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
devtools::install()
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
c()
opt.infile = 'incomingMSG.dat'
opt.outfile = 'testClientResults.dat'
list(infile = 'incomingMSG.dat',outfile = 'testClientResults.dat')
tmp <-list(infile = 'incomingMSG.dat',outfile = 'testClientResults.dat')
devtools::document()
devtools::load_all()
devtools::install()
opt<-mantis.ScenarioOptions()
View(opt)
opt$infile
scenario<-mantis.ScenarioOptions()
write("endSimYear")
paste(c('Subregion1','Subregion2'))
source("F:/UCDAVIS/GWToolsRpack/gwtools/R/mantis.R")
scenario <- mantis.ScenarioOptions()
View(scenario)
source("F:/UCDAVIS/GWToolsRpack/gwtools/R/mantis.R")
scenario <- mantis.ScenarioOptions()
View(scenario)
length(scenario)
scenario[[1]]
scenario[[2]]
names(scenario)
scenNames <- names(scenario)
length(scenNames)
is.empty.model(scenario$modifierName)
length(scenario$modifierName)
scenario$modifierName
as.character(scenario$modifierName)
length(as.character(scenario$modifierName))
strlen(scenario$modifierName)
source("F:/UCDAVIS/GWToolsRpack/gwtools/R/mantis.R")
scenario <- mantis.ScenarioOptions()
scenario$modifierName
scenario$modifierUnit <- 'MASS'
View(scenario)
scenario$modifierUnit <- NA
is.na(scenario$modifierName)
scenario[[5]]
scenNames <- names(scenario)
scenNames
scenNames[[19]]
scenNames[[19]]scen
scenario[[19]]
is.na(scenario[[19]])
!is.na(scenario[[19]])
scenNames[[4]]
paste(scenNames[[4]] scenario[[4]])
paste(scenNames[4] scenario[[4]])
paste(scenNames[4], scenario[[4]])
paste('#', scenario$descr)
scenNames
scenNames[12]
scenNames[12] == 'Regions'
scenario$Regions
length(scenario$Regions)
scenario$Regions[1]
scenario$Regions[2]
dim(scenario$Crops)
dim(scenario$Crops)[1]
scenario$Crops[1,1]
scenario$Crops[1,2]
paste(scenario$Crops[1,1], scenario$Crops[1,2])
c(56, 67,121,32)
paste(c(56, 67,121,32))
paste0(c(56, 67,121,32))
c(56, 67,121,32)
paste(c(56, 67,121,32),collapse = T)
paste(c(56, 67,121,32),collapse)
as.character(c(56, 67,121,32))
paste(as.character(c(56, 67,121,32)))
paste(c(56, 67,121,32),collapse= " ")
paste(c(56, 67,121,32),collapse= ", ")
paste(c(56, 67,121,32),collapse= " ")
paste(scenNames[18], c(56, 67,121,32),collapse= " ")
paste(c(56, 67,121,32),collapse= " ")
tmp <- paste(scenario[[4]],collapse= " ")
tmp <- paste(scenario[[5]],collapse= " ")
tmp <- paste(scenario[[6]],collapse= " ")
tmp <- paste(scenario[[7]],collapse= " ")
tmp
paste(scenNames[7], tmp)
source("F:/UCDAVIS/GWToolsRpack/gwtools/R/mantis.R")
View(scenario)
scenario$infile <- 'f:/UCDAVIS/Mantis/CPP/TestClient/Rinput.dat'
mantis.WriteInput(scenario)
is.na(scenario[[4]]
)
is.na(scenario[[4]])
is.na(scenario[[5]])
is.na(scenario[[6]])
is.na(scenario[[7]])
View(scenario)
View(scenario$Regions)
is.na(scenario$Regions)
is.na(scenario$Crops)
is.na(scenario$Crops[1])
is.na(scenario$[[3]][1])
is.na(scenario$[[3]])
is.na(scenario[[3]])
is.na(scenario[[3]][1])
is.na(scenario[[6]][1])
is.na(scenario[[7]][1])
is.na(scenario[[8]][1])
is.na(scenario[[9]][1])
is.na(scenario[[10]][1])
is.na(scenario[[11]][1])
is.na(scenario[[12]][1])
is.na(scenario[[13]][1])
source("F:/UCDAVIS/GWToolsRpack/gwtools/R/mantis.R")
mantis.WriteInput(scenario)
scenario$DepthRange <- c(10, 100)
mantis.WriteInput(scenario)
con <- file('f:/UCDAVIS/Mantis/CPP/TestClient/testClientResults.dat', open = "r")
con
line <- readLines(con)
line
close(con)
con <- file('f:/UCDAVIS/Mantis/CPP/TestClient/testClientResults.dat', open = "r")
readline(con)
close(con)
con <- file('f:/UCDAVIS/Mantis/CPP/TestClient/testClientResults.dat', open = "r")
readLines(con,1)
close(con)
con <- file('f:/UCDAVIS/Mantis/CPP/TestClient/testClientResults.dat', open = "r")
tmp <- readLines(con,1)
tmp
close(con)
tmp <- utils::read.table(file='f:/UCDAVIS/Mantis/CPP/TestClient/testClientResults.dat',skip = 1)
View(tmp)
library(hdf5r)
dd <- matrix(5.5,nrow = 10, ncol = 5)
View(dd)
cwd
cwd()
pwd()
pwd
getwd
getwd()
H5File$new(filename = tmp,mode = "w")
tmp.h5 <- H5File$new(filename = "tmp",mode = "w")
tmp.h5[["Data"]] <- dd
tmp.h5$close_all()
getwd()
dd <- matrix(5.5,nrow = 10, ncol = 5)
tmph5 <- H5File$new(filename = "tmp.h5",mode = "w")
tmph5[["Data"]] <- dd
tmph5[["Names"]] <- c("data1", "data2", "data3")
tmph5$close_all()
con <- file('f:/UCDAVIS/Mantis/CPP/TestClient/testClientResults.dat', open = "r")
line <- readLines(con,1)
line
substr(line,1,2000)
strsplit(substr(line,1,2000))
strsplit(substr(line,1,2000), split = " ")
line1 <- strsplit(substr(line,1,2000), split = " ")
line1
line1[1]
NNs <- as.numeric(strsplit(substr(line,1,2000), split = " "))
t <- as.numeric(strsplit(substr(line,1,2000), split = " "))
t <- strsplit(substr(line,1,2000), split = " ")
t
as.numeric(t)
as.numeric(t[1])
as.numeric(t[[1]])
as.numeric(t[[1]])[1]
NNs <- as.numeric(t[[1]])
NNs
NNs[1]
NNs[2]
#' Writes a mesh into a file for reading from the npsat_engine
#'
#' @param filename is the name of the file to write the mesh.
#' @param nd A matrix n x 2 with the mesh node coordinates
#' @param msh A matrix with the indices of the mesh elements. The matrix must be based on 1.
#' However the file will be printed as zero based
#' @return nothing
#' @export
npsat.writeMesh <- function(filename, nd, msh){
write(c(dim(nd)[1], dim(msh)[1]), file = filename, append = FALSE)
utils::write.table(nd, file = filename, sep = " ", row.names = FALSE, col.names = FALSE, quote = FALSE, append = TRUE)
utils::write.table(msh, file = filename, sep = " ", row.names = FALSE, col.names = FALSE, quote = FALSE, append = TRUE)
}
#' Writes a mesh into a file for reading from the npsat_engine
#'
#' @param filename is the name of the file to write the mesh.
#' @param nd A matrix n x 2 with the mesh node coordinates
#' @param msh A matrix with the indices of the mesh elements. The matrix must be based on 1.
#' However the file will be printed as zero based
#' @return nothing
#' @export
npsat.writeMesh <- function(filename, nd, msh){
write(c(dim(nd)[1], dim(msh)[1]), file = filename, append = FALSE)
utils::write.table(nd, file = filename, sep = " ", row.names = FALSE, col.names = FALSE, quote = FALSE, append = TRUE)
utils::write.table(msh, file = filename, sep = " ", row.names = FALSE, col.names = FALSE, quote = FALSE, append = TRUE)
}
#' Writes a mesh into a file for reading from the npsat_engine
#'
#' @param filename is the name of the file to write the mesh.
#' @param nd A matrix n x 2 with the mesh node coordinates
#' @param msh A matrix with the indices of the mesh elements. The matrix must be based on 1.
#' However the file will be printed as zero based
#' @return nothing
#' @export
npsat.writeMesh <- function(filename, nd, msh){
write(c(dim(nd)[1], dim(msh)[1]), file = filename, append = FALSE)
utils::write.table(nd, file = filename, sep = " ", row.names = FALSE, col.names = FALSE, quote = FALSE, append = TRUE)
utils::write.table(msh, file = filename, sep = " ", row.names = FALSE, col.names = FALSE, quote = FALSE, append = TRUE)
}
View(npsat.writeMesh)
devtools::document()
devtools::load_all()
devtools::install()
scenario <- mantis.ScenarioOptions()
#' mantis.ScenarioOptions Returns a structure with all available Mantis Scenario options
#'
#' @return A data frame with the budget terms corresponding to the entire area
#' @export
#'
#' @examples
#' scenario<-mantis.ScenarioOptions()
mantis.ScenarioOptions <- function(){
opt <-list(infile = 'incomingMSG.dat',
outfile = 'testClientResults.dat',
descr = 'This is a description of the simulation input',
endSimYear = 2100,
startRed = 2020,
endRed = 2030,
flowScen = 'C2VSIM_II_01',
unsatScen = 'C2VSIM_SPRING_2000',
wellType = 'VI',
unsatWC = 0.01,
bMap = 'Subregions',
Regions = c('Subregion1','Subregion2'),
RadSelect = NA, # X Y radius
RectSelect = NA, # Xmin Ymin Xmax Ymax
DepthRange = NA, #min max
ScreenLenRange = NA, #min max
loadScen = 'GNLM',
loadSubScen = NA,
modifierName = NA,
modifierType = NA,
modifierUnit = NA,
Crops = matrix(c(-9,1),nrow = 1, ncol = 2),
SourceArea = NA, #Npixels minPixels maxPixels percPixels
PixelRadius = NA,
DebugID = NA)
return(opt)
}
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
client_prog <- 'test.exe'
paste(client_prog, 'quit')
devtools::document()
devtools::load_all()
devtools::install()
scenario<-mantis.ScenarioOptions()
con <- file('f:/UCDAVIS/Mantis/CPP/TestClient/testClientResults.dat', open = "r")
line <- readLines(con,1)
close(con)
line
t <- as.numeric(strsplit(substr(line,1,2000), split = " "))
t <- strsplit(substr(line,1,2000), split = " ")
t
NNs <- as.numeric(t[[1]])
NNs
NNs[1]
library(gwtools)
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
